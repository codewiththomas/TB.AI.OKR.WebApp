@page "/okr-rules"
@using TB.AI.OKR.WebApp.Persistence.Entities;
@using TB.AI.OKR.WebApp.Persistence.Repositories;

<h3>OKR rules</h3>

@if (OkrRules.Any())
{
    <FluentDataGrid Items="OkrRules.OrderBy(x => x.Scope).ThenBy(x => x.Severity).AsQueryable()" ResizableColumns=true>
        <TemplateColumn Title="Active">
            <FluentSwitch 
                Value="context.IsActive"
                ValueChanged="(bool newValue) => SwitchActiveState(context.Id, newValue)">
            </FluentSwitch>
        </TemplateColumn>
        <PropertyColumn Property="@(x => x.Scope)" Sortable="true" Title="Scope" />
        <PropertyColumn Property="@(x => x.ToString())" Sortable="true" Title="Rule" />
@*         <PropertyColumn Property="@(x => x.ReferenceText)" Sortable="true" Title="Text" Class="multiline-text" />
        <PropertyColumn Property="@(x => x.CountOkrSets)" Sortable="true" Title="OKR count" />
        <PropertyColumn Property="@(x => x.CountRules)" Sortable="true" Title="Rule count" />
        <TemplateColumn Title="Actions">
            <FluentButton Appearance="Appearance.Accent" @onclick='@(() => NavigationManager!.NavigateTo("/references/edit/" + @context.Id))'>Edit</FluentButton>
            <FluentButton Disabled="@(context.CountRules > 0 || context.CountOkrSets > 0)" Appearance="Appearance.Accent" @onclick="() => HandleDeleteButtonClickAsync(context.Id)">Delete</FluentButton>
        </TemplateColumn> *@
    </FluentDataGrid>
}

@* @foreach (var scope in OkrRules.Select(x => x.Scope).Distinct().Order())
{    
    <h5>@scope</h5>
    <ul>
        @foreach (var okrRule in OkrRules.Where(x => x.Scope == scope).OrderBy(x => x.Severity))
        {
            <li>
                <FluentSwitch 
                    Value="okrRule.IsActive"
                      ValueChanged="(bool newValue) => SwitchActiveState(okrRule.Id, newValue)">
                </FluentSwitch> @okrRule.ToString()
            </li>
        }
    </ul>
} *@

@code {

    [Inject] private IOkrRuleRepository? OkrRuleRepository { get; set; }
    [Inject] private IToastService? ToastService { get; set; }

    public IEnumerable<OkrRule> OkrRules { get; set; } = new List<OkrRule>();

    protected override async Task OnInitializedAsync()
    {
        OkrRules = await OkrRuleRepository!.GetAllAsync();       
        await base.OnInitializedAsync();
    }


    private async Task SwitchActiveState(int okrRuleId, bool newValue)
    {
        var result = await OkrRuleRepository!.UpdateActiveStatus(okrRuleId, newValue);

        if (result)
        {
            ToastService!.ShowSuccess("Changes saved to database.");
        }
        else
        {
            ToastService!.ShowError("Error while saving to database.");
        }
    }

}

@page "/okr-rules"
@using TB.AI.OKR.WebApp.Persistence.Entities;
@using TB.AI.OKR.WebApp.Persistence.Repositories;

<h3>OKR rules (@OkrRules.Count() rules; @OkrRules.Where(x => x.IsActive).Count() active)</h3>

<FluentButton OnClick='() => NavigationManager!.NavigateTo("/okr-rules/add")'>Add new rule</FluentButton>

@if (OkrRules.Any())
{
    <FluentDataGrid Items="OkrRules.OrderBy(x => x.Scope).ThenBy(x => x.Severity).AsQueryable()" 
        ResizableColumns=true
                    GridTemplateColumns="0.1fr 0.1fr 1fr 0.2fr">
        <TemplateColumn Title="Active">
            <FluentSwitch 
                Value="context.IsActive"
                ValueChanged="(bool newValue) => SwitchActiveState(context.Id, newValue)">
            </FluentSwitch>
        </TemplateColumn>
        <PropertyColumn Property="@(x => x.Scope)" Sortable="true" Title="Scope" />
        <PropertyColumn Property="@(x => x.ToString())" Sortable="true" Title="Rule" />
        <TemplateColumn Title="Actions">
            
        </TemplateColumn>
    </FluentDataGrid>
}


@code {

    [Inject] private IOkrRuleRepository? OkrRuleRepository { get; set; }
    [Inject] private IToastService? ToastService { get; set; }
    [Inject] private NavigationManager? NavigationManager { get; set; }

    public IEnumerable<OkrRule> OkrRules { get; set; } = new List<OkrRule>();

    protected override async Task OnInitializedAsync()
    {
        OkrRules = await OkrRuleRepository!.GetAllAsync();       
        await base.OnInitializedAsync();
    }


    private async Task SwitchActiveState(int okrRuleId, bool newValue)
    {
        var result = await OkrRuleRepository!.UpdateActiveStatus(okrRuleId, newValue);

        if (result)
        {
            ToastService!.ShowSuccess("Changes saved to database.");
        }
        else
        {
            ToastService!.ShowError("Error while saving to database.");
        }
    }

}

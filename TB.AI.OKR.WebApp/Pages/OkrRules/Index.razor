@page "/okr-rules"
@using TB.AI.OKR.WebApp.Persistence.Entities;
@using TB.AI.OKR.WebApp.Persistence.Repositories;

<h3>OKR rules (@OkrRules.Count() rules; @OkrRules.Where(x => x.IsActive).Count() active)</h3>

<FluentStack Orientation="Orientation.Vertical">
    <FluentButton OnClick='() => NavigationManager!.NavigateTo("/okr-rules/add")'>Add new rule</FluentButton>

    <div class="pa-2"></div>

    @* <FluentSwitch Value="ShowActiveOnly" ValueChanged="(bool newValue) => HandleShowActiveOnlyChanged(newValue)"> *@
    <FluentSwitch @bind-Value="ShowActiveOnly">
        Show active only
    </FluentSwitch>
</FluentStack>


@if (OkrRules.Any())
{
    <FluentDataGrid Items="GetFilteredItems()"
                    ResizableColumns=true
                    GridTemplateColumns="0.1fr 0.1fr 0.2fr 0.1fr 1fr 0.2fr 0.2fr">
        <TemplateColumn Title="Active">
            <FluentSwitch 
                Value="context.IsActive"
                ValueChanged="(bool newValue) => SwitchActiveState(context.Id, newValue)">
            </FluentSwitch>
        </TemplateColumn>

        <PropertyColumn Property="@(x => x.Id)" Sortable="true" Title="Id" />

        <PropertyColumn Property="@(x => x.Scope)" Sortable="true" Title="Scope" />

        <PropertyColumn Property="@(x => x.Severity)" Sortable="true" Title="Severity" />

        <PropertyColumn Property="@(x => x.ToString())" Sortable="true" Title="Rule" Class="multiline-text">
            <ColumnOptions>
                <div class="search-box">
                    <FluentSearch type="search" Autofocus=true @bind-Value=ruleFilter @oninput="HandleRuleFilter" AfterBindValue="HandleClearRuleFilter" Placeholder="Rule..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>

        <PropertyColumn Property="@(x => string.Join("; ", x.References.Select(r => r.ReferenceSymbol)))" Sortable="true" Title="Source" Class="multiline-text" />
        <TemplateColumn Title="Actions">
            <FluentButton Appearance="Appearance.Accent" @onclick='@(() => NavigationManager!.NavigateTo("/okr-rules/edit/" + @context.Id))'>Edit</FluentButton>
        </TemplateColumn>
    </FluentDataGrid>
}


@code {

    [Inject] private IOkrRuleRepository? OkrRuleRepository { get; set; }
    [Inject] private IToastService? ToastService { get; set; }
    [Inject] private NavigationManager? NavigationManager { get; set; }

    public IEnumerable<OkrRule> OkrRules { get; set; } = new List<OkrRule>();


    protected override async Task OnParametersSetAsync()
    {
        OkrRules = await OkrRuleRepository!.GetAllAsync();
        await base.OnParametersSetAsync();
    }


    private async Task SwitchActiveState(int okrRuleId, bool newValue)
    {
        var result = await OkrRuleRepository!.UpdateActiveStatus(okrRuleId, newValue);

        if (result)
        {
            ToastService!.ShowSuccess("Changes saved to database.");
        }
        else
        {
            ToastService!.ShowError("Error while saving to database.");
        }
    }

    #region Filter IsActive

    private bool ShowActiveOnly { get; set; }

    #endregion


    #region Filter Scope


    private IQueryable<OkrRule>? GetFilteredItems()
    {
        return OkrRules?
            .Where(x => x.ToString().Contains(ruleFilter, StringComparison.CurrentCultureIgnoreCase))
            .Where(x => x.IsActive == true || !ShowActiveOnly)
            .OrderBy(x => x.Scope).ThenBy(x => x.Severity)
            .AsQueryable();
    }

    string ruleFilter = string.Empty;

    private void HandleClearRuleFilter(string? value)
    {
        ruleFilter = value ?? string.Empty;
    }

    private void HandleRuleFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            ruleFilter = value;
        }
    }

    #endregion
}

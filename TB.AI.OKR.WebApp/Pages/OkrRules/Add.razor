@page "/okr-rules/add"
@using System.Text;

<h3>Add an rule</h3>

<FluentStack Orientation="Orientation.Vertical">

    <FluentLabel>Select reference(s) [OPTIONAL]</FluentLabel>
    <FluentAutocomplete Id="references-autocomplete"
                        TOption="GetReferenceSourcesDto"
                        Placeholder="Select References"
                        OnOptionsSearch="@OnReferenceSearchAsync"
                        OptionText="@(x => x.ReferenceSymbol)"
                        Width="600"
                        @bind-SelectedOptions="@SelectedReferences" />

    <FluentStack Orientation="Orientation.Vertical">
        <FluentLabel>Scope</FluentLabel>
        <FluentSelect Items="@OkrRuleScopeOptions"
                      OptionText="@(x => x.Text)"
                      OptionValue="@(x => x.Value)"
                      OptionSelected="@(x => x.Selected)"
                      @bind-Value="@selectedOkrRuleScope" />
    </FluentStack>

    <FluentStack Orientation="Orientation.Vertical">
        <FluentLabel>Severity</FluentLabel>
        <FluentSelect Items="@OkrRuleSeverityOptions"
                      OptionText="@(x => x.Text)"
                      OptionValue="@(x => x.Value)"
                      OptionSelected="@(x => x.Selected)"
        @bind-Value="@selectedOkrRuleSeverity" />
    </FluentStack>

    <FluentTextField @bind-Value="OkrRuleTitle">
        <span>Rule Title</span>
    </FluentTextField>

    <FluentTextArea @bind-Value="OkrRuleText" Cols="100" Rows="2" Resize="TextAreaResize.Both">
        <span>Rule Text</span>
    </FluentTextArea>
    
    <p>@GetOkrRuleString()</p>

    <FluentButton Appearance="Appearance.Accent" OnClick="HandleSubmitButtonClickAsync">Save to database</FluentButton>

</FluentStack>

@code {
    [Inject] private NavigationManager? NavigationManager { get; set; }
    [Inject] private IOkrRuleRepository? OkrRuleRepository { get; set; }
    [Inject] private IReferenceSourceRepository? ReferenceSourceRepository { get; set; }
    [Inject] private IToastService? ToastService { get; set; }

    public string? OkrRuleTitle { get; set; }
    public string? OkrRuleText { get; set; }

    List<Option<string>> OkrRuleScopeOptions = new()
    {
        { new Option<string> { Value=OkrRuleScopes.OkrSet.ToString(), Text = OkrRuleScopes.OkrSet.GetDescription(false), Selected = true } },
        { new Option<string> { Value=OkrRuleScopes.Objective.ToString(), Text = OkrRuleScopes.Objective.GetDescription(false) } },
        { new Option<string> { Value=OkrRuleScopes.KeyResult.ToString(), Text = OkrRuleScopes.KeyResult.GetDescription(false) } }
    };
    private string selectedOkrRuleScope = OkrRuleScopes.OkrSet.ToString();

    List<Option<string>> OkrRuleSeverityOptions = new()
    {
        { new Option<string> { Value=OkrRuleSeverities.Info.ToString(), Text = OkrRuleSeverities.Info.GetDescription(false), Selected = true } },
        { new Option<string> { Value=OkrRuleSeverities.Should.ToString(), Text = OkrRuleSeverities.Should.GetDescription(false) } },
        { new Option<string> { Value=OkrRuleSeverities.Must.ToString(), Text = OkrRuleSeverities.Must.GetDescription(false) } }
    };
    private string selectedOkrRuleSeverity = OkrRuleSeverities.Info.ToString();

    private IEnumerable<GetReferenceSourcesDto> AvailableReferences { get; set; } = new List<GetReferenceSourcesDto>();
    private IEnumerable<GetReferenceSourcesDto> SelectedReferences = new List<GetReferenceSourcesDto>();

    /// <summary>
    /// Method gets invoked only with first render.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        AvailableReferences = await ReferenceSourceRepository!.GetAllAsync();
        await base.OnInitializedAsync();
    }


    /// <summary>
    /// Adds new OKR rule to the database.
    /// </summary>
    /// <returns></returns>
    private async Task HandleSubmitButtonClickAsync()
    {
        if (string.IsNullOrWhiteSpace(OkrRuleTitle) || OkrRuleTitle.Length < 3)
        {
            ToastService!.ShowError("Rule title must be at least 3 characters long.");
            return;
        }

        if (string.IsNullOrWhiteSpace(OkrRuleText) || OkrRuleText.Length < 3)
        {
            ToastService!.ShowError("Rule text must be at least 3 characters long.");
            return;
        }

        var newOkrRuleDto = new AddOkrRuleDto
        {
            OkrRuleTitle = OkrRuleTitle,
            OkrRuleText = OkrRuleText,
            Scope = ParseOkrRuleScope(selectedOkrRuleScope),
            Severity = ParseOkrRuleSeverity(selectedOkrRuleSeverity),
            ReferenceSourceIds = SelectedReferences.Select(x => x.Id).Distinct().ToList()
        };

        var newOkrRule = await OkrRuleRepository!.AddAsync(newOkrRuleDto);

        NavigationManager!.NavigateTo("/okr-rules");
        ToastService!.ShowSuccess("OKR rule added successfully.");
    }


    /// <summary>
    /// Helper method for reference search autocomplete.
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task OnReferenceSearchAsync(OptionsSearchEventArgs<GetReferenceSourcesDto> e)
    {
        e.Items = AvailableReferences
            .Where(i => i.ReferenceSymbol.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase))
            .OrderBy(i => i.ReferenceSymbol);
        await Task.Delay(0);
    }


    /// <summary>
    /// Returns the OKR rule formatted as readably string.
    /// </summary>
    /// <returns></returns>
    private string GetOkrRuleString()
    {
        if (string.IsNullOrWhiteSpace(OkrRuleText))
        {
            return string.Empty;
        }

        var Scope = ParseOkrRuleScope(selectedOkrRuleScope);
        var Severity = ParseOkrRuleSeverity(selectedOkrRuleSeverity);

        var result = new StringBuilder();

        result.Append("A");

        char firstLetterOfScope = Scope.GetDescription(false)![0];
        string vowels = "aeiou";

        if (vowels.Contains(firstLetterOfScope, StringComparison.OrdinalIgnoreCase))
        {
            result.Append("n");
        }

        result.Append(" " + Scope.GetDescription(false));

        switch (Severity)
        {

            case OkrRuleSeverities.Should:
                result.Append(" should");
                break;
            case OkrRuleSeverities.Must:
                result.Append(" must");
                break;
            case OkrRuleSeverities.Info:
            default:
                break;
        }

        return result.Append(" " + OkrRuleText).ToString();
    }


    /// <summary>
    /// Helper to parse a scope from string to enum.
    /// </summary>
    /// <param name="scopeText"></param>
    /// <returns></returns>
    private OkrRuleScopes ParseOkrRuleScope(string scopeText)
    {
        OkrRuleScopes scope;
        var okrRuleParseSucccess = Enum.TryParse(scopeText, out scope);

        if (!okrRuleParseSucccess)
        {
            scope = OkrRuleScopes.OkrSet;
        }

        return scope;
    }


    /// <summary>
    /// Helper to parse a severity from string to enum.
    /// </summary>
    /// <param name="severityText"></param>
    /// <returns></returns>
    private OkrRuleSeverities ParseOkrRuleSeverity(string severityText)
    {
        OkrRuleSeverities severity;
        var severityParseSuccess = Enum.TryParse(severityText, out severity);

        if (!severityParseSuccess)
        {
            severity = OkrRuleSeverities.Info;
        }

        return severity;
    }
}

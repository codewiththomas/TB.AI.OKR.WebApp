@page "/okrvalidation"
@using TB.AI.OKR.WebApp.Dtos;
@using TB.OpenAI.ApiClient;
@using TB.OpenAI.ApiClient.Contracts.Chat;

<h3>OKR Validation</h3>

<ul>
    @foreach (var instruction in GetInstructionSetWithPlaceholders(Instructions, Placeholders))
    {
        <li class="small">@instruction</li>
    }
</ul>

<InputText @bind-Value="OkrSetDto.Objective"/>
<InputText @bind-Value="OkrSetDto.KR1"/>
<InputText @bind-Value="OkrSetDto.KR2"/>
<InputText @bind-Value="OkrSetDto.KR3"/>
<InputText @bind-Value="OkrSetDto.KR4"/>
<InputText @bind-Value="OkrSetDto.KR5"/>

<button @onclick="@HandleSubmitButtonClick">Submit</button>

<hr/>

@if (!string.IsNullOrWhiteSpace(Prompt))
{
    <div>
        <strong>Prompt: </strong>@Prompt
    </div>
}

@if (!string.IsNullOrWhiteSpace(Answer))
{
    <div>
        <strong>Answer: </strong>@Answer
    </div>
}

@if (DebugInfos.Any())
{
    <div><strong>DebugInfos:</strong></div>
    <ul>
        @foreach (var debugInfo in DebugInfos)
        {
            <li>@debugInfo</li>
        }
    </ul>
}


@code {

    [Inject] public IOpenAiApiClient? OpenAiApiClient { get; set; }

    public OkrSetDto OkrSetDto { get; set; } = new();

    public string Prompt { get; set; } = string.Empty;
    public string Answer { get; set; } = string.Empty;
    public IEnumerable<string> DebugInfos { get; set; } = new List<string>();

    private readonly IDictionary<string, string> Placeholders = new Dictionary<string, string>();

    private readonly IEnumerable<string> Instructions = new List<string>
    {
        /* Setting the environment */
        "You are in the role of an OKR master in a company that uses Objectives and Key Results. Your task is to help people " +
        "formulating good okr sets from a written idea.",

        /* A user provided the following idea that must be transformed in an OKR set*/
        "A user provided the following OKR set. Start of OKR set: \"[OKRSET]\". This is the end of the OKR set.",

        /* Define criteria for good OKR. set */

        "An OKR set must have an Objective (O) and three to five Key Results (KR).",

        "The objective describes the \"What\", it expresses goals or intends. An Objective is considered as good when: " +
        " - it is aggresive, yet realistic, " + 
        " - it is tangible, objective, and unambigous, " + 
        " - it should be obvious to a rational observer whether an objective has been achieved, " + 
        " - the successful achievement of an objective must provide clear value to the company. ",

        "Key Results describe the \"How\", they express measurable outcomes. A Key Result is considered as good when: " +
        " - it is measurable and verifiable, " +
        " - it is difficult but not impossible to achieve, " +
        " - it describes outcomes, not activities (if KR includes words like consult, help, analyze, or participate, they describe activities).",

        "Please Rate the provided OKR set on a scale from 0 to 10 where 0 is bad and 10 is outstanding.",

        "Provide the answer as JSON in the format { \"rating\" : RATING, \"hints\" : [{\"hint\": HINT, \"example\": EXAMPLE}] } where RATING is the number you provided and " +
        "HINTS is an array of hints how the OKR set could be improved. If possible provide an example to each hint, how it could look in a correct way, " +
        "but stay to the content of the OKR set and do not make up new things.",
    
        "Your answer must be in German."
    };


    private IEnumerable<string> GetInstructionSetWithPlaceholders(IEnumerable<string> instructions, IDictionary<string, string> placeholders)
    {
        var prompt = new List<string>();

        foreach (var instruction in instructions)
        {
            var newInstruction = instruction;
            foreach (var placeholder in placeholders)
            {
                newInstruction = newInstruction.Replace(placeholder.Key, placeholder.Value);
            }
            prompt.Add(newInstruction);
        }

        return prompt;
    }


    private string BuildPrompt(IEnumerable<string> instructions)
        => string.Join("\n ", instructions);


    private async Task HandleSubmitButtonClick()
    {
        Answer = string.Empty;
        DebugInfos = new List<string>();

        if (!Placeholders.ContainsKey("[OKRSET]"))
        {
            Placeholders.Add("[OKRSET]", string.Empty);
        }
        Placeholders["[OKRSET]"] = OkrSetDto.ToString();

        var instructions = GetInstructionSetWithPlaceholders(Instructions, Placeholders);

        Prompt = BuildPrompt(instructions);

        var chatCompletionRequest = new CreateChatCompletionRequest();
        chatCompletionRequest.Messages.Add(new CreateChatCompletionRequestMessage
        {
            Content = Prompt
        });

        var answer = await OpenAiApiClient!.Chat.CreateChatCompletionAsync(chatCompletionRequest);

        foreach (var choice in answer.Choices)
        {
            Answer += choice?.Message?.Content ?? "LEER";
        }

        DebugInfos = answer.DebugInfos;

        StateHasChanged();
    }
}

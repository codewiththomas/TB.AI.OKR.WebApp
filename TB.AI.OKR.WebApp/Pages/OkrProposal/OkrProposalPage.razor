@page "/okr-proposal"
@using System.Text;
@using TB.GPT4All.ApiClient;
@using TB.OpenAI.ApiClient;
@using TB.OpenAI.ApiClient.Contracts.Chat;
<h3>OkrProposalPage</h3>

<ul>
@foreach (var instruction in GetInstructionSetWithPlaceholders(Instructions, Placeholders))
{
    <li class="small">@instruction</li>
}
</ul>

<InputText @bind-Value="Text"  />

<button @onclick="@HandleSubmitButtonClick">Submit</button>

@if (!string.IsNullOrWhiteSpace(Prompt))
{
    <div>
        <strong>Prompt: </strong>@Prompt
    </div>
}

<table>

    <thead>
        <tr>
            <th style="width:50%">OpenAI</th>
            <th style="width:50%">GPT4All</th>
        </tr>
    </thead>

    <tr>

        <td style="width:50%;">
            @if (!string.IsNullOrWhiteSpace(OpenAiAnswer))
            {
                <div>
                    <strong>Answer: </strong>@OpenAiAnswer
                </div>
            }
        </td>
        <td style="width:50%;">
            @if (!string.IsNullOrWhiteSpace(Gpt4AllAnswer))
            {
                <div>
                    <strong>Answer: </strong>@Gpt4AllAnswer
                </div>
            }
        </td>

    </tr>

    <tr>

        <td>
            @if (OpenAiDebugInfos.Any())
            {
                <div><strong>DebugInfos:</strong></div>
                <ul>
                    @foreach (var debugInfo in OpenAiDebugInfos)
                    {
                        <li>@debugInfo</li>
                    }
                </ul>
            }
        </td>
        <td>
            @if (OpenAiDebugInfos.Any())
            {
                <div><strong>DebugInfos:</strong></div>
                <ul>
                    @foreach (var debugInfo in Gpt4AllDebugInfos)
                    {
                        <li>@debugInfo</li>
                    }
                </ul>
            }
        </td>

    </tr>
</table>






@code {
    [Inject] public IOpenAiApiClient? OpenAiApiClient { get; set; }
    [Inject] public IGPT4AllApiClient? GPT4AllApiClient { get; set; }

    #region Provider-specific properties

    public string OpenAiAnswer { get; set; } = string.Empty;
    public IList<string> OpenAiDebugInfos { get; set; } = new List<string>();

    public string Gpt4AllAnswer { get; set; } = string.Empty;
    public IList<string> Gpt4AllDebugInfos { get; set; } = new List<string>();

    #endregion


    public string Text { get; set; } = string.Empty;

    public string Prompt { get; set; } = string.Empty;


    private readonly IDictionary<string, string> Placeholders = new Dictionary<string, string>();

    private readonly IEnumerable<string> Instructions = new List<string>
    {
        /* Setting the environment */
        "You are in the role of an OKR master in a company that uses Objectives and Key Results. Your task is to help people " +
        "formulating good okr sets from a written idea.",        

        /* A user provided the following idea that must be transformed in an OKR set*/
        "A user provided the following idea that must be transformed in an OKR set. Start of idea: \"[TEXT]\". This is the end of the idea.",

        /* Define criteria for good OKR. */

        "If the idea does not contain enough information to create a good OKR set then return an error and give hints what could be done better." + 
        "Return error messages as JSON in the format { \"success\" : false, \"messages\" : [ \"HINTS\" ] } where HINTS contain the error message " +
        "and your suggestions.",

        /* Instruction how to return the result */
        "If the idea contains enough information to create a OKR set from it return a successful results as JSON in the following structure " + 
        "{ \"objective\" : \"OBJECTIVETEXT\", \"keyresults\": [ \"KR_1\", \"KR2\", ..., \"KR_n\" ] } where " +
        "OBJECTIVETEXT and KR_1 to KR_n are meant as placeholders for the set you created."
    };


    /// <summary>
    /// Searches a list of instructions and replaces placeholders by values.
    /// </summary>
    /// <param name="instructions"></param>
    /// <param name="placeholders"></param>
    /// <returns></returns>
    private IEnumerable<string> GetInstructionSetWithPlaceholders(
        IEnumerable<string> instructions, 
        IDictionary<string, string> placeholders)
    {
        var prompt = new List<string>();

        foreach (var instruction in instructions)
        {
            var newInstruction = instruction;
            foreach (var placeholder in placeholders)
            {
                newInstruction = newInstruction.Replace(placeholder.Key, placeholder.Value);
            }
            prompt.Add(newInstruction);
        }

        return prompt;
    }


    /// <summary>
    /// Turns an list of instructions into a string.
    /// </summary>
    /// <param name="instructions"></param>
    /// <returns></returns>
    private string BuildPrompt(IEnumerable<string> instructions)
        => string.Join("\n ", instructions);


    /// <summary>
    /// Gets invoked when submit button is pressed. Resets answer and debug fields and calls
    /// the Apis of OpenAI and GPT4All.
    /// </summary>
    /// <returns></returns>
    private async Task HandleSubmitButtonClick()
    {
        OpenAiAnswer = string.Empty;
        OpenAiDebugInfos = new List<string>();

        Gpt4AllAnswer = string.Empty;
        Gpt4AllDebugInfos = new List<string>();

        if (string.IsNullOrWhiteSpace(Text))
        {
            Prompt = string.Empty;
            OpenAiAnswer = "You must not enter an empty string!";
            StateHasChanged();
            return;
        }

        if (!Placeholders.ContainsKey("[TEXT]"))
        {
            Placeholders.Add("[TEXT]", string.Empty);
        }

        Placeholders["[TEXT]"] = Text;

        var instructions = GetInstructionSetWithPlaceholders(Instructions, Placeholders);

        Prompt = BuildPrompt(instructions);

        var chatCompletionRequest = new CreateChatCompletionRequest();
        chatCompletionRequest.Messages.Add(new CreateChatCompletionRequestMessage
        {
            Content = Prompt
        });

        await GetOpenAiChatCompletion(chatCompletionRequest);
        await GetGPT4AllChatCompletion(chatCompletionRequest);
    }


    /// <summary>
    /// Calls the chat completion endpoint of the OpenAI API.
    /// </summary>
    /// <param name="chatCompletionRequest"></param>
    /// <returns></returns>
    public async Task<bool> GetOpenAiChatCompletion(CreateChatCompletionRequest chatCompletionRequest)
    {
        try
        {

            var answer = await OpenAiApiClient!.Chat.CreateChatCompletionAsync(chatCompletionRequest);

            foreach (var choice in answer.Choices)
            {
                OpenAiAnswer += choice?.Message?.Content ?? "LEER";
            }

            OpenAiDebugInfos = answer.DebugInfos;
        }
        catch (Exception ex)
        {
            OpenAiDebugInfos.Add("ERROR: " + ex.Message);
        }

        StateHasChanged();

        return true;
    }


    /// <summary>
    /// Calls the chat completion API of the GPT4All API.
    /// </summary>
    /// <param name="chatCompletionRequest"></param>
    /// <returns></returns>
    public async Task GetGPT4AllChatCompletion(CreateChatCompletionRequest chatCompletionRequest)
    {
        try
        {
            var answer = await GPT4AllApiClient!.Chat.CreateChatCompletionAsync(chatCompletionRequest);

            foreach (var choice in answer.Choices)
            {
                Gpt4AllAnswer += choice?.Message?.Content ?? "LEER";
            }

            Gpt4AllDebugInfos = answer.DebugInfos;
        }
        catch (Exception ex)
        {
            Gpt4AllDebugInfos.Add("ERROR: " + ex.Message);
        }

        StateHasChanged();
    }
}

@* @page "/okr-database/add"
@page "/okr-database/edit/{Id:int}"

@using Microsoft.Fast.Components.FluentUI;
@using TB.AI.OKR.WebApp.Helpers;
@using TB.AI.OKR.WebApp.Persistence.Entities;
@using TB.AI.OKR.WebApp.Persistence.Repositories;

<h3>@PageTitle</h3>

<FluentStack Orientation="Orientation.Vertical">

    <FluentTextArea @bind-Value="ObjectiveText" Cols="100" Rows="3" Resize="TextAreaResize.Both">
        <span>Objective</span>
    </FluentTextArea>

    @foreach (var keyResult in KeyResults)
    {
        var localIndex = keyResult.Key;
        <FluentTextArea Id="localIndex" @bind-Value="KeyResults[localIndex].Value" Cols="100" Rows="2" Resize="TextAreaResize.Both">
            <span>@(string.IsNullOrWhiteSpace(KeyResults[localIndex].Label) ? localIndex : KeyResults[localIndex].Label)</span>
        </FluentTextArea>
    }
    
    <FluentLabel>Sprache</FluentLabel>
    <FluentSelect TOption="string" @bind-Value="selectedLanguage">
        <FluentIcon Icon="Icons.Regular.Size16.Globe" Color="@Color.Neutral" Slot="indicator" />
        <FluentOption>de</FluentOption>
        <FluentOption Selected="true">en</FluentOption>
    </FluentSelect>

    <FluentButton Appearance="Appearance.Accent" OnClick="HandleSubmitButtonClickAsync">Save to database</FluentButton>

</FluentStack>



@code {

    [Inject] private NavigationManager? NavigationManager { get; set; }
    [Inject] private IOkrSetRepository? OkrRepository { get; set; }
    [Inject] private IToastService? ToastService { get; set; }

    [Parameter] public int? Id { get; set; }

    public string? ObjectiveText { get; set; }
    public Dictionary<string, FormItem> KeyResults { get; set; } = new Dictionary<string, FormItem>();

    public string PageTitle { get => Id is null ? "Add OKR to database" : "Edit existing OKR"; }

    private string? selectedLanguage = "en";


    /// <summary>
    /// Runs as first method at first render only.
    /// </summary>
    /// <param name="parameters"></param>
    /// <returns></returns>
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        /* Key Results */
        int maxKeyResults = 5;
        for (int i = 0; i < maxKeyResults; i++)
        {
            KeyResults.Add($"key-result-{(i + 1)}", new FormItem { Label = $"Key Result {(i + 1)}" });
        }
        await base.SetParametersAsync(parameters);
    }


    /// <summary>
    /// Runs every time the parameter Id is set. If Id is not null the OKR is loaded from the 
    /// database and fills the form.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        if (Id != null && Id != 0)
        {
            var existingOkr = await OkrRepository!.GetByIdAsync(Id.Value);

            if (existingOkr != null)
            {
                ObjectiveText = existingOkr.Objective;

                var keyResultsArray = existingOkr.KeyResults.ToArray();
                for (int i = 0; i < keyResultsArray.Length && i < KeyResults.Count(); i++)
                {
                    KeyResults[$"key-result-{(i + 1)}"].Value = keyResultsArray[i].Text;
                }
            }
        }
        await base.OnParametersSetAsync();
    }


    private async Task<bool> HandleSubmitButtonClickAsync()
    {
        if (Id is null || Id == 0)
        {
            return await AddOkrAsync();
        }
        return await UpdateOkrAsync();

    }

    private async Task<bool> AddOkrAsync()
    {
        var newKeyResults = new List<KeyResult>();

        foreach (var keyResult in KeyResults)
        {
            if (keyResult.Value.Value == null)
            {
                continue;
            }

            var newKeyResult = new KeyResult
            {
                Text = keyResult!.Value!.Value!
            };

            newKeyResults.Add(newKeyResult);
        }

        var newOkr = new OkrSet
        {
            Objective = ObjectiveText ?? string.Empty,
            KeyResults = newKeyResults,
            Language = selectedLanguage ?? "en"
        };

        var savedOkr = await OkrRepository!.AddAsync(newOkr);
        
        NavigationManager!.NavigateTo("okr-database");
        ToastService!.ShowSuccess("New OKR saved to database.");

        return savedOkr.Id != 0;

    }


    private async Task<bool> UpdateOkrAsync()
    {
        throw new NotImplementedException();
    }
}
 *@
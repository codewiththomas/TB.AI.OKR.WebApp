@page "/okr-database/add"
@page "/okr-database/edit/{Id:int}"

<h3>@PageTitle</h3>

<FluentStack Orientation="Orientation.Vertical">

    <FluentTextArea @bind-Value="ObjectiveText" Cols="100" Rows="3" Resize="TextAreaResize.Both">
        <span>Objective</span>
    </FluentTextArea>

    @foreach (var keyResult in KeyResults)
    {
        var localIndex = keyResult.Key;
        <FluentTextArea Id="localIndex" @bind-Value="KeyResults[localIndex].Value" Cols="100" Rows="2" Resize="TextAreaResize.Both">
            <span>@(string.IsNullOrWhiteSpace(KeyResults[localIndex].Label) ? localIndex : KeyResults[localIndex].Label)</span>
        </FluentTextArea>
    }

</FluentStack>



@code {

    [Parameter]
    public int? Id { get; set; }

    public string? ObjectiveText { get; set; }
    public Dictionary<string, FormItem> KeyResults { get; set; } = new Dictionary<string, FormItem>();

    public string? KR1 { get; set; }


    public string PageTitle { get => Id is null ? "Add OKR to database" : "Edit existing OKR"; }


    /// <summary>
    /// Runs as first method at first render only.
    /// </summary>
    /// <param name="parameters"></param>
    /// <returns></returns>
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        /* Key Results */
        int maxKeyResults = 5;
        for (int i = 0; i < maxKeyResults; i++)
        {
            KeyResults.Add($"key-result-{(i + 1)}", new FormItem { Label = $"Key Result {(i + 1)}" });
        }
        await base.SetParametersAsync(parameters);
    }
}

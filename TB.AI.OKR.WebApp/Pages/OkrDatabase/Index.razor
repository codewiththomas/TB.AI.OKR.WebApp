@page "/okr-database"
@page "/okr-database/index"

<h3>OKR sample database (@OkrSets.Count() sets)</h3>

<FluentButton OnClick='() => NavigationManager!.NavigateTo("/okr-database/add")'>Add new OKR</FluentButton>

@if (OkrSets.Any())
{
    <FluentDataGrid Items="GetFilteredItems()" GridTemplateColumns=" 0.1fr 0.2fr 1fr 0.2fr 0.2fr 0.2fr 0.2fr" ResizableColumns=true>
        <TemplateColumn Title="Training/Validation">
            <FluentSwitch Value="context.IsTrainingData"
                          ValueChanged="(bool newValue) => SwitchActiveState(context.Id, newValue)">
            </FluentSwitch>
        </TemplateColumn>
        <PropertyColumn Property="@(x => x.Level ?? "n.a.")" Sortable="true" Title="Level" />        
        <TemplateColumn Title="OKR set" Sortable="true" Class="multiline-text">
            <span><strong>O: @context.Objective</strong></span><br />
            @for (int i = 0; i < context.KeyResults.Count(); i++)
            {
                <span class="TypeRampMinus1FontSize">@($"KR{(i+1)}: {context.KeyResults.ToList()[i]}")</span>
                <br />
            }
        </TemplateColumn>
        <TemplateColumn Title="Key results" Sortable="true">
            @context.KeyResults.Count()
        </TemplateColumn>
        <PropertyColumn Property="@(x => string.Join("; ", x.References.Select(r => r.ReferenceSymbol)))" Sortable="true" Title="Source" />
        <PropertyColumn Property="@(x => x.Language)" Sortable="true" Title="Language"/>
        <TemplateColumn Title="Actions">
            <FluentButton IconEnd="@(new Icons.Regular.Size16.Eye())" @onclick='@(() => NavigationManager!.NavigateTo("/okr-database/view/" + @context.Id))'></FluentButton>
            <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())" @onclick='@(() => NavigationManager!.NavigateTo("/okr-database/edit/" + @context.Id))'></FluentButton>
            <FluentButton Appearance="Appearance.Lightweight" @onclick='@(() => NavigationManager!.NavigateTo("/okr-validation/" + @context.Id))'>Validate</FluentButton>
        </TemplateColumn>
    </FluentDataGrid>
}
else
{
    <div>Sample database is empty.</div>
}


@code {

    [Inject] private NavigationManager? NavigationManager { get; set; }
    [Inject] private IOkrSetRepository? OkrRepository { get; set; }
    [Inject] private IToastService? ToastService { get; set; }

    public IEnumerable<GetOkrSetsDto> OkrSets { get; set; } = new List<GetOkrSetsDto>();

    /// <summary>
    /// Method gets invoked only with first render.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        OkrSets = await OkrRepository!.GetAllAsync();
        OkrSets = OkrSets.OrderBy(x => x.Objective);
        await base.OnParametersSetAsync();
    }


    private IQueryable<GetOkrSetsDto>? GetFilteredItems()
    {
        return OkrSets?
            .OrderBy(x => x.Objective)
            .AsQueryable();
    }


    /// <summary>
    /// Switches the state whether the OKR set is used for training or for validation of an ML model.
    /// </summary>
    /// <param name="okrSetId"></param>
    /// <param name="newValue"></param>
    /// <returns></returns>
    private async Task SwitchActiveState(int okrSetId, bool newValue)
    {
        var result = await OkrRepository!.UpdateTrainingStatus(okrSetId, newValue);

        if (result)
        {
            var changedOkrSetDto = OkrSets.First(x => x.Id == okrSetId);
            changedOkrSetDto.IsTrainingData = newValue;    
            ToastService!.ShowSuccess("Changes saved to database.");
            StateHasChanged();
        }
        else
        {
            ToastService!.ShowError("Error while saving to database.");
        }
    }
}

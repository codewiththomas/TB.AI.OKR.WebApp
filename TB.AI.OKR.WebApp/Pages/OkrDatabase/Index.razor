@page "/okr-database"
@page "/okr-database/index"

@using TB.AI.OKR.WebApp.Persistence.Entities;
@using TB.AI.OKR.WebApp.Persistence.Repositories;

<h3>OKR sample database (@OkrSets.Count() sets)</h3>

<FluentButton OnClick='() => NavigationManager!.NavigateTo("/okr-database/add")'>Add new OKR</FluentButton>

@if (OkrSets.Any())
{
    <FluentDataGrid Items="OkrSets.AsQueryable()" GridTemplateColumns="0.2fr 1fr 0.2fr 0.2fr 0.2fr 0.2fr" ResizableColumns=true>
        <PropertyColumn Property="@(x => x.Level ?? "n.a.")" Sortable="true" Title="Level" />
        <PropertyColumn Property="@(x => x.Objective)" Sortable="true" Title="Objective" Class="multiline-text" />
        <TemplateColumn Title="Key results" Sortable="true">
            @context.KeyResults.Count()
        </TemplateColumn>
        <PropertyColumn Property="@(x => string.Join("; ", x.References.Select(r => r.ReferenceSymbol)))" Sortable="true" Title="Source" />
        <PropertyColumn Property="@(x => x.Language)" Sortable="true" Title="Language"/>
        <TemplateColumn Title="Actions">
            @* <FluentButton Appearance="Appearance.Accent" @onclick='@(() => NavigationManager!.NavigateTo("/okr-database/edit/" + @context.Id))'>Edit</FluentButton> *@
            <FluentButton Appearance="Appearance.Accent" @onclick='@(() => NavigationManager!.NavigateTo("/okr-validation/" + @context.Id))'>Validate</FluentButton>
        </TemplateColumn>
    </FluentDataGrid>
}
else
{
    <div>Sample database is empty.</div>
}


@code {

    [Inject] private NavigationManager? NavigationManager { get; set; }
    [Inject] private IOkrSetRepository? OkrRepository { get; set; }
    [Inject] private IToastService? ToastService { get; set; }

    public IEnumerable<GetOkrSetsDto> OkrSets { get; set; } = new List<GetOkrSetsDto>();

    /// <summary>
    /// Method gets invoked only with first render.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        OkrSets = await OkrRepository!.GetAllAsync();
        OkrSets = OkrSets.OrderBy(x => x.Objective);
        await base.OnInitializedAsync();
    }
}
